--------------------------------------------------------------------------------
Functions such as Context::dbcast_send take int arguments that are not const.
This precludes invoking dbcast_send with an argument declared const int.
Must modify all Context members to have const int arguments.

XMLGFPreprocessor uses Allgather to send xmlcontent to all tasks, which is 
unnecessary since the parser is only created on task 0 (for now)

gfdata matrix used in XMLGFPreprocessor uses a single-row context. May be
preferrable to use a single-column context when nst is small to avoid 
memory problems.

XMLGFPreprocessor crashes at XMLGFPreprocessor.C:548 on h2o32md.xml files.

Include current energy e0 in arguments of IonicStepper::compute_rp, in 
addition to forces f0. Use e0 to backtrack when energy rises in the SDA alg.

Optimal choice of alignment and orthogonalizations in BOSampleStepper.C

Bug: calculation starts if ref_cell is defined but not cell. Crash in FFT.
--------------------------------------------------------------------------------
Bug in scalapack pdgetri.f (inverse of square matrix)
Added bugfix from J.Langou into local modified copy of pdgetri.f 
Must link to local pdgetri.o before the scalapack lib
--------------------------------------------------------------------------------
rel1_30_1
Wavefunction.C: typos
XMLGFPreprocessor.C: fixed bug in boundary adjustment.
jacobi.C: implement special case of fewer blocks than process columns.
BOSampleStepper.C: Moved Kerker preconditioning of charge density update
before Anderson acceleration.
ChargeMixCoeff.h: Changed default value to 1.0
ExtStress.h: initialize with zero in ctor
MDIonicStepper.C, Thermostat.h: corrected misspelled ANDERSEN
--------------------------------------------------------------------------------
rel1_30_0
D3vector.h: modified ctor to avoid accidental use with only one argument.
AtomSet.[Ch]: added functions to get/reset center of mass velocity.
StatusCmd.h: status cmd prints center of mass velocity.
MDIonicStepper.[Ch]: new thermostats ANDERSON LOWE. Old thermo renamed
to SCALING.
--------------------------------------------------------------------------------
rel1_29_1
BOSampleStepper.C: use wfmm only when needed. ASP extrapolation implemented.
Activate NTC or ASP extrapolation using debug variable.
XMLGFPreprocessor.C: added tests to avoid div by zero if no local grid
--------------------------------------------------------------------------------
rel1_29_0
BOSampleStepper.C: major rewrite:
added a wf_stepper->preprocess before the itscf loop to 
get correct extrapolation when ions move.
Modified NTC extrapolation: activated if NTC_EXTRAPOLATION is found in the 
debug variable.
ReadTSC.h: added missing #define statement
Debug.h: modified to take arbitrary strings
jacobi.C: new jacobi diagonalization. activate with ifdef in Wavefunction.C
--------------------------------------------------------------------------------
rel1_28_2
AtomSet.h: initialize nel_ in ctor.
XMLGFPreprocessor.C: use char buffer to read file.
Include timers in SlaterDet::ortho_align with #if TIMING
qb.C: remove <> brackets in processor names for XML compatibility (BGL)
AtomSetHandler.C, SpeciesHandler.C: removed msg about xlink, replaced with href
Species.C, SaveCmd.C: removed xlink namespace declaration in sample
SlaterDet.C: added #if TIMING and timers in ortho_align
MDIonicStepper.h: corrected comments
--------------------------------------------------------------------------------
rel1_28_1e{1234567} experimental versions containing
various modifications leading to rel1_28_2
--------------------------------------------------------------------------------
rel1_28_0
qb.C, SaveCmd.C, qbox_xmlns.C, xmlSpecies.C: change namespace to fpmd
--------------------------------------------------------------------------------
rel1_27_1
minor updates to make single-node version work.
--------------------------------------------------------------------------------
rel1_26_1e
redefine constraint command and subcommands, output format.
Introduce constraint names.
Remove ListConstraintsCmd.h
SDAIonicStepper.h: fixed bug: 
Use of ndofs_ incorrect when ndofs<3*na (when constraints are defined).
Use CHOLESKY_REMAP macro value for size of square context in SlaterDet.C (bgl).
--------------------------------------------------------------------------------
rel1_26_0 
Species.C: changed spline BC for local potential.
SlaterDet.C: randomize: return if basis size is zero.
Implementation of a new logic in all IonicStepper classes.
Implementation of the move command.
Implementation of constraints.
Implementation of distance, angle and torsion measurement commands.
--------------------------------------------------------------------------------
rel1_25_0
implementation of netcharge.
SpeciesCmd.C: print species information when adding species.
bug fix: MDWavefunctionStepper.C: correct dt2bye when ecuts>0.
--------------------------------------------------------------------------------
rel1_24_3
FourierTransform.C: removed unused code.
NonLocalPotential.C: cleanup calculation of G=0 in update_twnl.
BOSampleStepper.C: added APC counters
qb.C: added APC counters
--------------------------------------------------------------------------------
rel1_24_2
NonLocalPotential.C: Fixed bug in G=0 component of l=0 non-local projector in 
semilocal form (merged bugfix from rel1_23_4)
--------------------------------------------------------------------------------
rel1_24_1
SlaterDet.C: fixed bug introduced in 1.24.0: Cholesky decomp was skipped if 
CHOLESKY_REMAP is not defined.
--------------------------------------------------------------------------------
rel1_24_0
UnitCell.C: added space in output of lattice vectors.
Wavefunction.C: added syevx option for diagonalization (not active)
BOSampleStepper.C: added diag timer.
SlaterDet.C: Added CHOLESKY_REMAP macro to enable remapping to a square context
in SlaterDet::gram.
SlaterDet.C: rewritten communication in SlaterDet::print and SlaterDet::write
to avoid a deadlock on BGL.
Matrix.C: Added syevx and syevd functions
Note: modif of SlaterDet.C introduced a bug: see 1.24.1
--------------------------------------------------------------------------------
rel1_23_4 (on branch rel1_23_3_bf)
Fixed bug in NonLocalPotential.C: G=0 component of l=0 semilocal projector.
--------------------------------------------------------------------------------
rel1_23_3
NonLocalPotential.C: fixed bug: double fnl_size should be int fnl_size.
--------------------------------------------------------------------------------
rel1_23_2
FourierTransform.C: Fixed bug #39: When unit cells are non-orthogonal, the
transforms along x are not done correctly. Bounds including all non-zero 
transforms are redefined.
Basis.C: Simplified basis set construction.
NonLocalPotential.C: removed variables used in old implementation (pre 1.23.0)
--------------------------------------------------------------------------------
rel1_23_1 
PSDAWavefunctionStepper.C: Reset default theta for negative curvature to 0.0.
AndersonMixer: added settable default theta value for negative curvature.
--------------------------------------------------------------------------------
rel1_23_0
Added SDA algorithm for atoms dynamics: Anderson acceleration of SD.
New implementation of NonLocalPotential::energy, recomputing anl array at
every call.
Modified IonicStepper to make ekin and temp virtual. Implemented only in 
MDIonicStepper.
--------------------------------------------------------------------------------
rel1_22_0
BOSampleStepper.C: new implementation of Kerker-Anderson charge mixing.
new variables charge_mix_rcut and charge_mix_coeff introduced: determine
the Kerker cutoff and mixing coefficient parameters.
--------------------------------------------------------------------------------
rel1_21_0
Context.[Ch]: redesigned Context to be column-major in all cases.
ChargeDensity.C: vcontext definition modified.
SlaterDet.C: new my_col_ctxt member: store single column Context.
Use modified Context allocation for my_col_ctxt to ensure that calls to
MPI_Comm_create are done with same arguments on all tasks.
Wavefunction.C: use simpler Context constructor (default is col-major).
UserInterface.C: removed printing of newline when echo==true.
Cleaned up timers in wf steppers.
--------------------------------------------------------------------------------
rel1_20_1
NonLocalPotential.C: fixed index calculation (bug 38).
--------------------------------------------------------------------------------
rel1_20_0
Wavefunction.C: Changed allocation of sd context to column-major order to get
contiguous nodes in  context columns.
Wavefunction.C: Changed maxiter to 500 and dmu to 2 eV in update_occ.
Nrowmax.h: add update_occ when changing nrowmax.
Matrix.C:219 and similar: removed assert. Some valptr may be 0 on some blocks.
SlaterDet.C: print sdcontext dimensions in SlaterDet::info.
ChargeDensity.C: added (void*) cast to delete statements (for xlC 7.0).
Known bug #38: incorrect forces with nrowmax=16 with 512 tasks. Occurs when 
nrowmax <= (ntasks/nrowmax)/2.
--------------------------------------------------------------------------------
rel1_19_0 2004-10-04
BOSampleStepper.C: Implemented simple charge mixing for SCF iterations.
Disabled potential mixing. 
SpeciesReader.C: fixed parsing of species files.
SlaterDet.C in print and write: fixed incorrect allocation of char buffer b:
caused segfaults when saving sample.
Base64Transcoder.[Ch]: added cstdio style interface for print function.
FourierTransform.[Ch]: implemented timers, activated if TIMING is defined.
testFourierTransform.C: updated to print timing info in readable form.
Known bug: Wavefunction::update_occ iteration on mu does not converge in some
systems.
--------------------------------------------------------------------------------
rel1_18_0 2004-09-14 (not for distribution)
BOSampleStepper modified for scf iterations. Update of charge density and 
calculation of VHXC is taken out of EnergyFunctional.
RunCmd modified. Use run niter nitscf nite.
Added FermiTemp variable.
Modifications for calculation of occupation numbers if nempty > 0.
Added USE_XERCES macro. If not defined, the Xerces library is not used, and 
only species files can be read. Loading of sample files without the Xerces lib
is not implemented yet.
SlaterDet.C modified to remove dependency on xercesc. Uses Base64Transcoder.
Makefile modified for libqb.a target for BGL.
Known bug: SpeciesReader.C incorrect if not USE_XERCES
Known bug: Base64 encoding not done in SlaterDet.C
--------------------------------------------------------------------------------
rel1_17_1 2004-08-18
Fixed bug #27: overrun of variable tmpfion in NonLocalPotential.C is due to 
incorrect index calculation in situations where na[is] % (ntasks/nrowmax) != 0.
This is the case for (CdSe)_110 on 128 tasks, nrowmax=32, since na[is]/4 = 27.5.
Note: bug #27 does not affect calculations with a single non-local projector
(npr[is]==1).
Fixed bug #33 LDAFunctional.C: incorrect use of Perdew-Zunger caused small
differences (~1.e-3 a.u.) in total energy when compared to other codes.
The adjustment of the constant gamma to make the PZ energy function continuous
was incorrect. Instead, the constants C and D must be adjusted to ensure
continuity of Ec and its derivative at rs=1.
--------------------------------------------------------------------------------
rel1_17_0 2004-08-11
Fixed buffer overrun in Context::string_bcast. (note: bug #27 is not fixed).
Fixed bug 26: inconsistent qbox xmlns namespace in species file and qbox output.
Modified qb.C: use new qbox_xmlns() function to print qbox XML namespace.
EnergyFunctional.C:909: change lda argument to 14. This was done automatically
by the BLACS lib, but corrected line conforms to the BLACS convention that
lda >= m.
ChargeDensity.C: changed the <total_electronic_charge> output to an XML comment.
SaveCmd.C: include proper xmlns info when saving a sample.
blas.h: reorganized using the ADD_ macro, removed all platform-specific ifdefs.
XCPotential.C: removed underscores in blas calls.
SlaterDet.C: removed underscores in blas calls.
FourierTransform.C: use ADD_ for zdscal.
NonLocalPotential.C: removed underscores in blas calls, removed old OSF ifdefs.
--------------------------------------------------------------------------------
rel1_16_0
Implemented l=1,l=2 non-local stress.
Modified UnitCell.C to avoid infinite loops due to finite precision.
Modified mcr.mk to use library mkl_p4 instead of mkl: -lmkl_p4 before -lmkl
This change of library accelerates the si432 calculation by 12% overall
--------------------------------------------------------------------------------
rel1_15_2
Ecut.h: exit without any action if ecut is same as current value. Caused 
zeroing of the wavefunction velocity when used in a redundant manner.
Added isodate.C/isodate.h and release.C/release.h files for separate access
to these functions from any other object.
Added a <description> tag in the sample file in SaveCmd.C including the ISO
date and the release of qbox that was used to create the file. 
(Note: the tag was already allowed by the Schema specification, but the 
save command did not write any description information.)
--------------------------------------------------------------------------------
rel1_15_1
Fixed bug: stop on assert in NonLocalPotential for l=1 or l=2 projectors
Fixed bug: Matrix::init_size() with zero dimensions.
Known bugs:
-wf_diag variable is ignored.
--------------------------------------------------------------------------------
rel1_15_0
Added R option for the cell_lock variable: rescale unit cell only (keep aspect
ratio fixed).
Corrected inconsistencies between BOSampleStepper.C and CPSampleStepper.C as
regards printing of variables during a run: unit_cell, enthalpy, pv.
Known bugs:
-Stops on assert in NonLocalPotential::update_twnl() for l=1 or l=2 projectors
-Crashes when defining a species without using it, i.e. species with zero atoms.
 Traced to incorrect initialization of sizes in Matrix.C
--------------------------------------------------------------------------------
rel1_14_3
Fixed calculation of ekin_e in MDWavefunctionStepper.C to avoid small error
when printing ekin_e at the first iteration of a CP run. Note: only the printed
ekin_e is affected, wfs are correct.
--------------------------------------------------------------------------------
rel1_14_2
Fixed Thermostat in MDIonicStepper.C
Fixed use of ionic velocities at first step in CPSampleStepper.C
Known bug:
Calculation of ekin_e in MDWavefunctionStepper.C at the first iteration uses
the wf velocity at t=0. This is second order accurate, but not consistent with
the calculation of ekin_e in subsequent steps, which introduces a small error
in the printed ekin_e at the first iteration. Ekin_e should be calculated using
a first-order expression, i.e. (wf0-wfm)/dt to be consistent.
--------------------------------------------------------------------------------
rel1_14_1a
SlaterDet.C: Removed messages from resize about cell being enclosed by ref_cell.
Note: the determination of enclosure should be revised.
SDCellStepper.C: removed debug messages. New "S" option to preserve shape.
BOSampleStepper.C: Added output of cell dimensions if cell is not locked.
Preconditioner.C: bug fixed in calculation of diag when using confinement.
Known bugs: 
Does not use ionic velocities at first step of CP dynamics.
Thermostat is not working.
--------------------------------------------------------------------------------
rel1_14_0
Matrix.h Reintroduced the clear() call in the resize members. Working with 
uninitialized matrices sometimes caused NaNs to appear in the padding areas
of the danl matrix in NonLocalPotential.C.
Note that the clear() call was removed in rel1_13_0, which invalidates 1_13_0.
Matrix.C: Added assert()'s in clear() functions.
BOSampleStepper.C: Introduced quadratic wf extrapolation option (switch
in BOSampleStepper.C, currently disabled in 1.14.0. Added calculation
of forces at each electronic step to monitor the convergence
of the force x velocity product (disabled in 1.14.0).
PSDWavefunctionStepper.C: Fixed bug in usage of preconditioner (affects 
1_13_0 only).
PSDAWavefunctionStepper.C: Fixed bug in usage of preconditioner (see above).
SlaterDet.[Ch]: introduced new orthogonalization and alignment functions:lowdin, 
align, ortho_align.


--------------------------------------------------------------------------------
rel1_13_0 (not for release, see Matrix clear() bug above)
Implemented stress calculation and variable cell dynamics
Stress calculation works for s-only non-local potentials.
Changed names of variables tau0, taup to r0, rp (and keep tau for scaled
coordinates)
modified the IonicStepper interface to separate the calculation of rp
from the update r0 := rp.
Removed a bug in calculation of eta at first step (was not using ekin_ion)
--------------------------------------------------------------------------------
rel1_13_0a1 (not for release)
Computes stress tensor. Limited to s-only n-l projectors. No cell eq. of 
motion yet. Tested against GP results in cubic Si64.
--------------------------------------------------------------------------------
rel1_12_1
Removed Gauss-Jacobi quadrature in NonLocalPotential introduced in 1_12_0 and
reverted to trapezoidal rule. Tests on Si64 using trapezoidal, Simpson, Gauss-
Legendre and Gauss-Jacobi show that the trapezoidal rule is more efficient 
than all other methods, likely because higher order methods are not in their 
asymptotic range for reasonable numbers of points  (4-32). A possible 
improvement over the present status may be to use Richardson extrapolation, 
since the trapezoidal rule has O(h^2) error. However, from the example of Si64, 
little improvement is obtained for small (4-8) numbers of points.
--------------------------------------------------------------------------------
rel1_12_0
Replaced trapezoidal integration in NonLocalPotential.C by a Gauss-Jacobi rule.
(Note: this was later found to be less efficient. Removed in 1.12.1e)
Fixed bug in PSDWavefunctionStepper.C and PSDAWavefunctionStepper.C:
use ecut if ecutprec==0.0. Caused nans when ecutprec was not set.
--------------------------------------------------------------------------------
rel1_11_2 2003-12-04
Fixed Elan allocation failure problem in SlaterDet::write. Problem was caused 
by the large number of buffers allocated by the elan lib for all the messages
sent to task 0 before a receive was posted for them. A barrier in the loop
over states limits the number of messages sent to task 0 at any given time.
Note: the problem likely doesn't show on AIX since the MPI implementation may 
limit the number of buffered received messages. The barrier is added in the 
AIX code too (SlaterDet::print).
--------------------------------------------------------------------------------
rel1_11_1
Fixed uninitialized var eta_ in MDIonicStepper that caused errors on AIX.
Known problem: elan allocation failure on mcr when writing h2o64 sample
using 140 tasks on 70 nodes. Possible bug in SlaterDet::write if USE_CSTDIO_LFS.
When running on AIX (using SlaterDet::print instead of SlaterDet::write) no 
problem arises, and memory usage per node is low.(fixed in 1_11_2).
--------------------------------------------------------------------------------
rel1_11_0
BOSampleStepper: changed to do extrapolation and ionic move before 
smoothing the wf. Uses wf velocity if available. Creates it if not
Included PSDA wf stepper.
BO dyn Works ok with PSDA. 
Tested 1pe vs 2pe on CH4 BO dynamics: ok.
Corrected bug in SampleReader.C (reading of wf velocity, appeared in rel1_9_0)
--------------------------------------------------------------------------------
rel1_10_0 (not for release) (Note: known bugs)
Complete rewrite of the SampleStepper hierarchy, including CP and BO classes.
Runs CP and BO/SD and BO/PSD tests ok. No extrapolation of wavefunctions yet.
Note: wavefunction extrapolation implemented yet.
Planned work: interchange nite iterations and ionic move in BO stepper, so 
that the wfs at the end of the iteration are the GS for the ionic positions at
the same time.
XML files: a <description> tag (optional) was added to the sample.xsd file
to include any information about the sample that a user may want to include.
Bug in SampleReader.C: reading of density matrix for the 
wavefunction velocity is incorrect. Causes out of sync MPI call and Abort
Corrected in 1_11_0 (candidate)
--------------------------------------------------------------------------------
rel1_9_0 (Note: known bugs)
Large file support (LFS): LFS is not correctly supported for <iostream> in icc
and gcc 3.2. A workaround is implemented in SaveCmd.C, Wavefunction.C, 
SlaterDet.C. The workaround is activated by defining the USE_CSTDIO_LFS macro.
Occupation numbers moved to the SlaterDet class.
Occupation numbers are not fixed to 2.0 anymore. Load and save now use
occupation numbers.
Bug in SampleReader.C: reading of density matrix for the 
wavefunction velocity is incorrect. Causes out of sync MPI call and Abort
Corrected in 1_11_0 (candidate)
--------------------------------------------------------------------------------
rel1_8_2
Fixed problem with wfvtmp in SampleReader: cannot load sample and 
then set wf_dyn = MD. Also, the order of load and set wf_dyn MD commands causes 
a seg fault.
--------------------------------------------------------------------------------
rel1_8_1
Fixed large-file support for sample files.
Fixed resizing of wf velocity.
Defined Matrix::operator=.
Fixed bug in PSD optimization: G=0 coefficient had zero value of dt2bye.
Fixed bug in UnitCell::fold_in_ws: caused infinite loop in some cases.
--------------------------------------------------------------------------------
rel1_8_0
Added thermostat, th_time, th_temp.
Added emass variable.
--------------------------------------------------------------------------------
rel1_7_1
Fixed bug in calculation of electronic kinetic energy in SampleStepper.C which
caused small kink in ekin_e and spike in econst during restarts.
--------------------------------------------------------------------------------
rel1_7_0
Implemented parallel XML preprocessing of sample files for fast loading.
Added -serial option to the load command to force serial parsing of files.
Fixed a bug in Context::string_send: was incorrect for zero-length strings
initialization of ibuf removed, unnecessary.
Added new dmin,dmax,imin,imax,string_send,string_recv,pmap functions in 
Context
Changed the block distribution of the slabs in FourierTransform to adopt the
same type of block distribution used in ScaLAPACK. Needed in SampleReader.C
in order to read from the gfdata matrix.
--------------------------------------------------------------------------------
rel1_6_1exp
2003-07-24:modified initialization of coefficients in SlaterDet constructor
to choose g vectors of minimum norm. Note: reverting to -O2 option using xlC
after noting that -O3 causes incorrect results in testBasis.
Added dmin,dmax,imin,imax members to Context.C to identify process where 
max or min is found.
--------------------------------------------------------------------------------
rel1_6_0
Implemented MD for wfs and for ions, print ekin_e, ekin_ion, econst in 
SampleStepper.C. Use Stoermer's rule to compute velocities at end points.
Implemented load/save of wf velocities
--------------------------------------------------------------------------------
rel1_5_1
Fixed bug in NonLocalPotential that appeared for Contexts having multiple
columns and rows (computation of enl and fion incorrect).
--------------------------------------------------------------------------------
rel1_5_0    May 21, 2003
Parallel Load/Save XML sample implemented.
Load is slow: 6 min for 256 states on a (64)^3 grid (H2O_64, 73 Ry)
Save is ok (30 s.)
Bug found in NonLocalPotential::update_eigr: index of first local atom not
computed. Fixed. Affects calculations with multiple-column contexts.
Fixed bug in NonLocalPotential::energy: loop over fnl elements.
Added optional ecut attribute to the wavefunction element to insure
restart from xml sample in exact same conditions. If ecut attribute is not
specified in xml file, a value is inferred from the grid size.
Fixed incorrect initialization of dwf in EnergyFunctional::energy.
Implemented PSD for wf_dyn.
--------------------------------------------------------------------------------
rel1_4_0    May 16, 2003
Implemented byteswap operation when loading/saving XML base64 file on AIX.
(affects WavefunctionHandler.[Ch] and SlaterDet.[Ch].
All storage in base64 form is therefore little-endian. No byte swapping needed
on Intel platforms.
--------------------------------------------------------------------------------
rel1_3_0    May 16, 2003
New features in rel1_3_0:
XML input for sample, species, atomset, wavefunctions, including base64
encoding. New hiearchy of XML handler classes for parsing of sample files.
Parsing done with Apache xerces-c, 2.2.0.
Clean-up of FourierTransform: convention of fwd/bwd changed to be consistent
with usually accepted definitions (forward transform is Fourier analysis, i.e.
computation of Fourier coefficients, and involves scaling by 1/np012. Backward
transform is computation of real-space function from coefficients, no scaling).
Load command includes reading of sample and appropriate resizing of all 
variables.
The "locked" variable is removed from the Atom class, and will be reintroduced
as a Constraint. This is to avoid having to include the "locked" info in the 
XML definition of an Atom.
Builds and runs on Linux (linuc-pc_mpi_icc.mk) and on snow (aix_mpi.mk)
--------------------------------------------------------------------------------
Jan 24, 2003
Checking in release rel1_0_0:
performs SD steps with LDA and local pseudopotentials
--------------------------------------------------------------------------------
Thu Jan  9 16:01:42 PST 2003
Added UserInterface to qb. Commands Set, Print, Quit, Atom.
TO BE FIXED: SlaterDet cannot resize if more states than basis functions.
This forces the order in which ecut, cell and atoms are defined.
--------------------------------------------------------------------------------
Tue Sep 24 14:19:13 PDT 2002
SlaterDet can exist on any context.
Developing a Wavefunction that can hold any number of SlaterDets for 
arbitrary nspin and nkpoints.
--------------------------------------------------------------------------------

Examples of sizes for H2O calculations
--------------------------------------

512 molecules (1536 atoms), cell: 46.912^3 Bohr, ecut=85Ry, FTGrid 280x280x280
nst = 2048

BlacsContext (nprow = 128, npcol = 128), total of 16384 nodes
16 states/column
wfbasis.size() = 690000
vbasis.size() = 5480000
global matrix of coefficients: 690000 x 2048 complex<double>, 
(or 1380000 x 2048 double)
wfbasis.localsize() = 5400
vbasis.localsize() = 42800
local size of coefficients: 5400 x 16 x sizeof(complex<double>) = 1.4 MB 
local size of FTGrid: 280x280x280/128 x sizeof(complex<double>) = 2.7 MB
local number of grid points: 280x280x280/128 = 172000

keeping the real-space copies of the wavefunctions takes 16 real grid
functions per column, i.e. 2.7 * 8 = 22 MB, and is therefore possible.

The number of FFT's needed to compute the density is 8 (complex)
on each column. Considering the timing of a 280^3 transform with 128
tasks on Frost (0.24 s.), the 8 transforms take 2.0 seconds.
Accumulation of the charge density is an MPI_Allreduce on the 
rows of the BlacsContext.

NonLocalPotential:
aux[ia][ig] for s-projector: distributed across rows and columns:
512/128 = 4 atoms/column, 5400 plane-waves/row:
local size: 4 * 5400 * sizeof(complex<double>) = 0.3 MB
Fnl[n][ia]: 2048 x 512 double: distributed over rows and columns
localsize: 16 x 4 double

Replicating aux[ia][ig] on each column:
localsize = 512 x 5400 x sizeof(complex) = 44 MB

LocalPotential
Real space grid, replicated over columns: 1.4 MB/node

Summary of local sizes:

3 copies of wf coefficients:    33   MB
1 real-space copy of wf's       22   MB
2 complex FTGrid's               5.4 MB
1 real rho grid                  1.4 MB
1 real vloc grid                 1.4 MB
3 real grad_rho grids            4.2 MB
1 aux array                      2.7 MB
                               --------
                                70.1 MB
                                
Using replicated aux[ia][ig] arrays in NonLocalPotential adds 44 MB.
Note that having p-projectors would multiply the size of aux by 4, thus
making it difficult to replicate projectors on nodes. 
Distributing projectors across rows and columns is better suited for 
simulations involving d-projectors, or semi-local potentials (factors
10-20 in the number of projectors)

(sizes are OK for BGL, assuming 256 MB/node)
--------------------------------------------------------------------------------

2048 molecules (6144 atoms), cell 46x92x92 Bohr, ecut=85Ry, grid 280x560x560
nst=8192

Use a BlacsContext (nprow=256, npcol=256), total of 65536 nodes
32 states / column
Basis.size() = 22000000
global matrix of coefficients: 22000000 x 8192 complex<double>, 
(or 44000000 x 8192 double)
Basis.localsize() ~= 85600
local size of coefficients: 85600 x 32 x sizeof(complex<double>) = 44 MB
local size of FTGrid: 280x560x560/256 x sizeof(complex<double>) = 5.4 MB

(i.e. sizes are OK for BGL)
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 FTGrid timings
--------------------------------------------------------------------------------

(using blue, esslsmp)

   file           size      tasks     nodes   fwd/bwd time
   ----           ----      -----     -----   ------------
ftest.o45511  264x264x264      2        2        11.0
ftest.o45507  264x264x264      4        4         5.8
ftest.o45506  264x264x264      8        8         3.0
ftest.o45505  264x264x264     16       16         1.6
ftest.o45504  264x264x264     32       32         0.9-1.1
ftest.o43442  264x264x264     64       64         0.5-0.6
ftest.o43879  264x264x264    128       64         1.0-2.9 
ftest.o43431  264x264x264    256       64         1.9-10.5
ftest.o43423  264x264x264    128       32         1.5-4.5
ftest.o39910  264x264x264     64       16         1.6-4.4
ftest.o41371  264x264x264     32        8         2.2-4.6
ftest.o10483  264x264x264     64        8         1.6-7.8 (snow)
ftest.o10481  264x264x264     32        8         1.8-3.7 (snow)

ftest.o3426   256x256x256    128       32         0.7-0.8
ftest.o1065   256x256x256     64       16         1.0     

ftest.o1067   512x512x512    128       32         4.0-4.5

--------------------------------------------------------------------------------
Note: these results were obtained with esslsmp. Better timings
can be obtained with essl and using 1 task per cpu.
The timings with essl and multiple tasks per node also appear
to be very homogeneous from node to node. It is likely that 
the use of esslsmp causes delays in the MPI calls, and is 
the source of the very inhomogenous timings observed
--------------------------------------------------------------------------------
Timings with essl

   file           size      tasks     nodes   fwd/bwd time
   ----           ----      -----     -----   ------------
              264x264x264     16        1       1.0/1.0 (Frost)         
              264x264x264     16        4       3.6/3.7 (Blue)
              140x140x140      4        1       1.2/1.3 (Blue)

--------------------------------------------------------------------------------
Using 4 nodes on Blue for the (264)^3 case, it is better to use 16 tasks
with 4 tasks/node with essl (3.6 s.) than to use 4 tasks with 1 task/node
and esslsmp (5.8 s.).
